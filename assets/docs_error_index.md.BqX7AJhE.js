import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.C0mjmqwC.js";const o=JSON.parse('{"title":"可能的错误","description":"","frontmatter":{"page":true,"title":"可能的错误"},"headers":[],"relativePath":"docs/error/index.md","filePath":"docs/error/index.md"}'),l={name:"docs/error/index.md"};function e(h,s,p,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="可能的错误" tabindex="-1">可能的错误 <a class="header-anchor" href="#可能的错误" aria-label="Permalink to &quot;可能的错误&quot;">​</a></h1><h2 id="依赖注入提示-【注入失败】" tabindex="-1">依赖注入提示：【注入失败】 <a class="header-anchor" href="#依赖注入提示-【注入失败】" aria-label="Permalink to &quot;依赖注入提示：【注入失败】&quot;">​</a></h2><ul><li>检查是否使用的是<code>interface</code>而非<code>class</code></li><li>是否在<code>tsconfig.json</code>中开启了装饰器</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;experimentalDecorators&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;emitDecoratorMetadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="编写了controller和method但是访问失败" tabindex="-1">编写了controller和method但是访问失败 <a class="header-anchor" href="#编写了controller和method但是访问失败" aria-label="Permalink to &quot;编写了controller和method但是访问失败&quot;">​</a></h2><p>请检查程序的入口文件</p><ul><li><code>businessPath</code>为项目的业务路径，所有的代码都要放到这个目录下，默认为<code>src</code></li><li><code>controllerPath</code>为控制器目录，默认为<code>modules</code>，在<code>businessPath/controllerPath</code>下的所有index.ts为控制器文件，需要默认导出被<code>@Controller</code>装饰的类作为装饰器，否则不会生效</li></ul><h2 id="自定义装饰器失效" tabindex="-1">自定义装饰器失效 <a class="header-anchor" href="#自定义装饰器失效" aria-label="Permalink to &quot;自定义装饰器失效&quot;">​</a></h2><p>由于TS装饰器执行顺序的原因，所有的自定义装饰器需要放在<code>Mango</code>装饰器的下方</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Controller, Get, createParameterDecorator } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mango-core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createParameterDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Logger </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt;&gt;&gt;&gt;&gt; 使用错误❌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试模块&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  prefix: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  detail: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这是一段测试模块的备注&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tags: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;测试&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@Logger </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt;&gt;&gt;&gt;&gt; 使用正确✅</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @Logger </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt;&gt;&gt;&gt;&gt; 使用错误❌</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @Logger </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &gt;&gt;&gt;&gt;&gt; 使用正确✅</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="类型提示丢失" tabindex="-1">类型提示丢失 <a class="header-anchor" href="#类型提示丢失" aria-label="Permalink to &quot;类型提示丢失&quot;">​</a></h2><p>可能会出现<code>@Controller</code>,<code>@Get</code>等装饰器的参数类型提示失效</p><p>这个是由于vscode的typescript版本过低导致的</p><p>由于<code>Elysia</code>使用了<code>NoInfer</code>类型工具，而typescript是从5.4版本开始支持的</p>`,14)]))}const g=i(l,[["render",e]]);export{o as __pageData,g as default};
